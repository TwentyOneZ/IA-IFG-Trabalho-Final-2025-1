import argparse
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import subprocess
import seaborn as sns
import scipy.stats as stats
import subprocess, sys

from scripts.data_load import load_crypto_data
from scripts.features import create_features
from scripts.models import get_models
from scripts.utils import simular_lucro_vetorizado
from sklearn.preprocessing import PolynomialFeatures
from scripts.models import train_model_cv
import logging

# ==== ANALYZE ====

def gerar_graficos(df: pd.DataFrame, symbol: str, show: bool, save: bool) -> None:
    """
    Gera gr√°ficos estat√≠sticos para uma criptomoeda: boxplot, histograma e gr√°fico de linha com m√©dia, mediana e moda.

    Args:
        df (pd.DataFrame): DataFrame com dados da criptomoeda.
        symbol (str): S√≠mbolo da criptomoeda (ex: BTC).
        show (bool): Se True, exibe os gr√°ficos.
        save (bool): Se True, salva os gr√°ficos na pasta 'figures/'.
    """
    paths = {
        "boxplot": os.path.join("figures", "boxplot"),
        "hist": os.path.join("figures", "hist"),
        "lineplot": os.path.join("figures", "lineplot"),
    }
    for p in paths.values():
        os.makedirs(p, exist_ok=True)

    # Boxplot
    plt.figure(figsize=(8, 4))
    sns.boxplot(y=df["Close"])
    plt.title(f"Boxplot do Pre√ßo de Fechamento - {symbol}")
    if save:
        plt.savefig(f"{paths['boxplot']}/boxplot_{symbol}.png", dpi=150)
    if show:
        plt.show()
    plt.close()

    # Histograma
    plt.figure(figsize=(8, 4))
    sns.histplot(df["Close"], bins=30, kde=True)
    plt.title(f"Histograma do Pre√ßo de Fechamento - {symbol}")
    if save:
        plt.savefig(f"{paths['hist']}/hist_{symbol}.png", dpi=150)
    if show:
        plt.show()
    plt.close()

    # Linha com m√©dia, mediana e moda
    df["Mean"] = df["Close"].expanding().mean()
    df["Median"] = df["Close"].expanding().median()
    df["Mode"] = df["Close"].rolling(window=10).apply(lambda x: stats.mode(x)[0], raw=True)

    plt.figure(figsize=(12, 4))
    plt.plot(df["Date"], df["Close"], label="Close", alpha=0.6)
    plt.plot(df["Date"], df["Mean"], label="M√©dia")
    plt.plot(df["Date"], df["Median"], label="Mediana")
    plt.plot(df["Date"], df["Mode"], label="Moda", linestyle='--')
    plt.title(f"Evolu√ß√£o do Pre√ßo com M√©dia, Mediana e Moda - {symbol}")
    plt.legend()
    plt.tight_layout()
    if save:
        plt.savefig(f"{paths['lineplot']}/lineplot_{symbol}.png", dpi=150)
    if show:
        plt.show()
    plt.close()

def analyze(args: argparse.Namespace) -> None:
    """
    Fun√ß√£o principal para o comando 'analyze'. Carrega os dados e gera os gr√°ficos.

    Args:
        args (argparse.Namespace): Argumentos passados pela CLI.
    """
    symbol = args.crypto.upper()
    filepath = f"Dados/Dia/Poloniex_{symbol}USDT_d.csv"

    if not os.path.exists(filepath):
        print(f"Arquivo n√£o encontrado: {filepath}")
        return

    df = load_crypto_data(filepath)
    close = df["Close"]
    logging.info(f"M√©dia: {close.mean():.2f}")
    logging.info(f"Mediana: {close.median():.2f}")
    logging.info(f"Moda: {close.mode().iloc[0]:.2f}")
    logging.info(f"Vari√¢ncia: {close.var():.2f}")
    logging.info(f"Desvio padr√£o: {close.std():.2f}")
    logging.info(f"1¬∫ quartil (q1): {np.percentile(close, 25):.2f}")
    logging.info(f"3¬∫ quartil (q3): {np.percentile(close, 75):.2f}")
    logging.info(f"M√≠nimo: {close.min():.2f}")
    logging.info(f"M√°ximo: {close.max():.2f}")
    gerar_graficos(df, symbol, args.show, args.save)

# ==== SIMULATE ====

def simulate(args: argparse.Namespace) -> None:
    """
    Executa a simula√ß√£o de lucro utilizando um modelo preditivo para a criptomoeda especificada.

    Args:
        args (argparse.Namespace): Argumentos da linha de comando contendo crypto, model, start_date e save.
    """
    symbol = args.crypto.upper()
    model_name = args.model
    filepath = os.path.join("Dados", "Dia", f"Poloniex_{symbol}USDT_d.csv")

    if not os.path.exists(filepath):
        print(f"Arquivo n√£o encontrado: {filepath}")
        return

    df = load_crypto_data(filepath)
    df = create_features(df)
    df.replace([np.inf, -np.inf], np.nan, inplace=True)
    df.dropna(inplace=True)

    if args.start_date:
        try:
            df = df[df["Date"] >= pd.to_datetime(args.start_date)]
        except Exception as e:
            print(f"Data inv√°lida: {args.start_date}. Use o formato YYYY-MM-DD.")
            return

    X = df[["pct_change_1d", "volume_change_1d", "ma_3", "ma_7", "ma_14", "std_7", "std_14"]].values
    y = df["target"].values

    models = get_models(degree_list=[2, 3, 5])
    if model_name not in models:
        print(f"Modelo '{model_name}' n√£o encontrado.")
        return

    model = models[model_name]
    if isinstance(model, tuple) and model[0] == "poly":
        poly = model[1]
        X = poly.fit_transform(X)
        model = model[2]

    model.fit(X, y)
    df["target"] = model.predict(X)
    resultado = simular_lucro_vetorizado(df)

    os.makedirs("figures/lucro", exist_ok=True)
    sufixo_data = f"_desde_{args.start_date}" if args.start_date else ""
    base_nome = f"lucro_{symbol}_{model_name}{sufixo_data}"

    plt.figure(figsize=(12, 5))
    plt.plot(resultado["Data"], resultado["capital_estrategia"], label="Modelo (estrat√©gia ativa)")
    plt.plot(resultado["Data"], resultado["capital_hold"], label="Buy and Hold", linestyle="--")
    plt.title(f"Simula√ß√£o de Lucro ‚Äî {symbol} com {model_name}")
    plt.xlabel("Data")
    plt.ylabel("Capital acumulado (USD)")
    plt.grid(True)
    plt.legend()

    if args.save:
        plt.savefig(f"figures/lucro/{base_nome}.png", dpi=150)
        print(f"üìà Gr√°fico salvo em figures/lucro/{base_nome}.png")
    else:
        plt.show()

    if args.save:
        resultado.to_csv(f"figures/lucro/{base_nome}.csv", index=False)
        print(f"üìÑ Planilha salva em figures/lucro/{base_nome}.csv")

# ==== TRAIN ====

def train(args: argparse.Namespace) -> None:
    """
    Treina m√∫ltiplos modelos preditivos usando valida√ß√£o cruzada (K-Fold) com os dados da criptomoeda.

    Args:
        args (argparse.Namespace): Argumentos da CLI contendo s√≠mbolo da criptomoeda e n√∫mero de folds.
    """
    symbol = args.crypto.upper()
    filepath = os.path.join("Dados", "Dia", f"Poloniex_{symbol}USDT_d.csv")

    if not os.path.exists(filepath):
        print(f"Arquivo n√£o encontrado: {filepath}")
        return

    df = load_crypto_data(filepath)
    df = create_features(df)
    df.replace([np.inf, -np.inf], np.nan, inplace=True)
    df.dropna(inplace=True)

    X = df[["pct_change_1d", "volume_change_1d", "ma_3", "ma_7", "ma_14", "std_7", "std_14"]].values
    y = df["target"].values

    print(f"\nüöÄ Treinando modelos com valida√ß√£o K-Fold (k={args.kfolds})...")
    models = get_models(degree_list=[2, 3, 5])

    for name, m in models.items():
        if isinstance(m, tuple) and m[0] == "poly":
            poly = m[1]
            X_poly = poly.fit_transform(X)
            result = train_model_cv(X_poly, y, m[2], k=args.kfolds)
        else:
            result = train_model_cv(X, y, m, k=args.kfolds)

        print(f"\nüìå Modelo: {name}")
        print(f"RMSE m√©dio: {result['rmse_mean']:.2f} ¬± {result['rmse_std']:.2f}")
        print(f"MAE  m√©dio: {result['mae_mean']:.2f} ¬± {result['mae_std']:.2f}")


# ==== MAIN ====

def main() -> None:
    """
    Fun√ß√£o principal que configura e executa a interface de linha de comando (CLI),
    redirecionando para os subcomandos apropriados.
    """
    parser = argparse.ArgumentParser(description="Painel de controle de criptomoedas")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # analyze
    analyze_parser = subparsers.add_parser("analyze", help="Gera gr√°ficos (boxplot, histograma e evolu√ß√£o do pre√ßo com m√©dia, mediana e moda da criptomoeda")
    analyze_parser.add_argument("--crypto", required=True, help="S√≠mbolo da criptomoeda (ex: BTC)")
    analyze_parser.add_argument("--show", action="store_true", help="Exibe os gr√°ficos")
    analyze_parser.add_argument("--save", action="store_true", help="Salva os gr√°ficos em 'figures/'")

    # simulate
    simulate_parser = subparsers.add_parser("simulate", help="Simula lucro com base nas previs√µes do modelo")
    simulate_parser.add_argument("--crypto", required=True, help="S√≠mbolo da criptomoeda (ex: BTC)")
    simulate_parser.add_argument("--model", required=True, help="Modelo a usar: linear, mlp, poly_deg2 a poly_deg10.")
    simulate_parser.add_argument("--start-date", type=str, help="Data inicial da simula√ß√£o (YYYY-MM-DD)")
    simulate_parser.add_argument("--save", action="store_true", help="Salva gr√°fico e planilha")

    # train
    train_parser = subparsers.add_parser("train", help="Treina e avalia modelos com K-Fold")
    train_parser.add_argument("--crypto", required=True, help="S√≠mbolo da criptomoeda (ex: BTC)")
    train_parser.add_argument("--kfolds", type=int, default=5, help="N√∫mero de folds para valida√ß√£o (default=5)")

    # compare
    compare_parser = subparsers.add_parser("compare", help="Compara todos os modelos com treino at√© 01/01/2024 e teste a partir do dia seguinte at√© a √∫ltima amostra. Gera gr√°ficos/textos.")
    compare_parser.add_argument("--crypto", required=True, help="S√≠mbolo da criptomoeda (ex: BTC)")

    # hypothesis
    hypothesis_parser = subparsers.add_parser(
        "hypothesis",
        help="Teste de hip√≥tese de retorno m√©dio di√°rio ‚â• x%%"
    )
    hypothesis_parser.add_argument(
        "--threshold",
        type=float,
        required=True,
        help="Valor x em porcentagem (ex: 1.5 para 1.5%%)"
    )
    hypothesis_parser.add_argument(
        "--alpha",
        type=float,
        default=0.05,
        help="N√≠vel de signific√¢ncia (default 0.05)"
    )
    hypothesis_parser.add_argument(
        "--save",
        action="store_true",
        help="Salva resultados em CSV em results/"
    )

    # anova
    anova_parser = subparsers.add_parser(
        "anova",
        help="ANOVA de retornos di√°rios entre criptomoedas"
    )
    anova_parser.add_argument(
        "--alpha",
        type=float,
        default=0.05,
        help="n√≠vel de signific√¢ncia (default=0.05)"
    )
    anova_parser.add_argument(
        "--save",
        action="store_true",
        help="salvar resultados em results/"
    )

    # anova-groups
    ag_parser = subparsers.add_parser(
        "anova-groups",
        help="ANOVA de retornos por grupos de criptomoedas"
    )
    ag_parser.add_argument(
        "--metric",
        choices=["volatility","mean_return","volume"],
        default="volatility",
        help="m√©trica para agrupar (default=volatility)"
    )
    ag_parser.add_argument(
        "--alpha",
        type=float,
        default=0.05,
        help="n√≠vel de signific√¢ncia (default=0.05)"
    )
    ag_parser.add_argument(
        "--save",
        action="store_true",
        help="salvar resultados em results/"
    )

    args = parser.parse_args()

    if args.command == "analyze":
        analyze(args)
    elif args.command == "simulate":
        simulate(args)
    elif args.command == "train":
        train(args)
    elif args.command == "compare":
        subprocess.run([
            sys.executable, "-m", "scripts.compare_models",
            "--crypto", args.crypto
        ], check=True)
    elif args.command == "hypothesis":
        cmd = [
            sys.executable, "-m", "scripts.test_hypothesis",
            "--threshold", str(args.threshold),
            "--alpha",    str(args.alpha)
        ]
        if args.save:
            cmd.append("--save")
        subprocess.run(cmd, check=True)
    elif args.command == "anova":
        cmd = [
            sys.executable, "-m", "scripts.anova",
            "--alpha", str(args.alpha)
        ] + (["--save"] if args.save else [])
        subprocess.run(cmd, check=True)
    elif args.command == "anova-groups":
        cmd = [
            sys.executable, "-m", "scripts.anova_groups",
            "--metric", str(args.metric),
            "--alpha",  str(args.alpha)
        ] + (["--save"] if args.save else [])
        subprocess.run(cmd, check=True)

if __name__ == "__main__":
    main()

